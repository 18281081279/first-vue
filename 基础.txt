

1：组件的使用
    可以使用name给组件取名
    每个vue组件，由三部分构成：template、script、style
    使用组件的步骤：1导入组件，2在script中用components节点注册组件(私有子组件)，3以标签的形式使用组件
                    或：在main.js中导入Count,并用Vue.component注册全局组件
2：生命周期
    组件创建阶段:beforeCreated,created,beforeMount,Mounted
    //beforeCreate,此时props,data,method都不可用
    //created,初始化props,data,method,一般在这个时候发送ajax请求,但是这个时候模板结构还没生成，不能操作dom
    //beforMount,在即将把 HTML结构渲染到页面之前
    //mounted,HTML结构已经创建好，此时可以操作dom
    
    组件运行阶段:beforeUpdate,update
    //beforeUpdate,检测到数据的变化，将要重新渲染dom元素。此时数据是最新的，但是dom元素不变
    //updated,根据最新的数据，重新渲染dom元素

    组件销毁阶段:beforeDestrot,destroyed
    //beforeDestroy,组件将要被销毁，但还可以被访问到
    //destroyed,组件被销毁

3：组件之间数据共享
    组件之间常见的关系：父子关系，兄弟关系
    
    父向子传递数据，使用自定义属性：
        子组件在props声明自定义属性，父组件调用时，用v-bind传入数据。
    
    子想父传递数据，使用自定义事件：
        在子组件中调用$emit('name','var')方法
        在父组件中调用子组件时候调用 <son @name='fun'></son>
        在父组件中调用fun(val){}得到传递的值

    兄弟之间数据共享，在vue2.0中使用EventBus
        创建EventBus.js
        在发送方使用bus.$emit方法
        在接受方使用bus.$on方法

4：ref引用dom和组件
    使用ref引用dom元素
    组件中有一个$refs空对象，可以放dom元素的引用
        例:<div ref='a'></div>
            <script>
                this.$refs.a
            </script>
    
    使用ref引用组件
        <Left ref='left'></Left>

5：动态组件
    component标签
    keep-alive保持状态,可以缓存标签，而不是销毁
        当组件被缓存时，会触发deactivated生命周期函数
        当组件被激活时，或触发activated生命周期函数
        include属性可以指定哪些组件可以被缓存,
            或者exclude指定哪些属性不能被缓存，不能同时使用这两个属性

6：插槽（slot）
    允许开发者在封装组件时，把不确定的、希望用户指定的部分定义为插槽
    具名插槽：使用v-slot指定渲染到哪个标签，可以简写为#
    作用域插槽：可以在插槽中定义数据

7：自定义指令
    私有自定义指令，全局自定义指令
    私有指令:
        directive:{
            color:{
                bind(el){
                    el.style.color= 'red'
                }
            }
        }
        <div v-color></div>

        动态绑定
        data(){
            return:{
                color:blue
            }
        }

        directive:{
            color:{
                bind(el,binding){
                    el.style.color = binding.value
                }
                //bind只会被调用一次，所以使用updata，让dom元素改变时，再次触发
                updata(el,binding){
                    el.style.color = binding.value
                }
            }
        }
        <div v-color='color'></div>

        全局指令
        Vue.directive('color',function(el,binding){
            ……
        })
8：路由
    路由就是对应关系
    工作流程：  用户点击网页上的路由链接    
                url地址栏的hash值发生变化
                前端路由监听到hash地质变化
                前端路由把当前的hash地址对应的组件渲染到页面
    安装配置router
    基本使用见： /router、/App2.vue;
    嵌套路由:chidren
    动态路由匹配,冒号后面是动态参数的名称 
    {path:'/movie/:id,component:Movie}
    在路由参数对象中，this.$route.query访问查询参数
                    this.$route.params访问路径参数
                    this.$toute.fullpath访问完整参数
    
    声明式导航&编程式导航
    编程式导航：vue-router中常用的API
                //跳转到指定的地址，并增加一条历史记录
                this.$router.push('Hash地址')
                //跳转到指定的地址，并替换掉当前历史记录
                this.$router.replace('Hash地址')
                //在浏览历史中前进或后退
                this.$router.go(数值n)
    
    导航守卫：控制路由的访问权限
            全局前置守卫
